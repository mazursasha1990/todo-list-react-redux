{"ast":null,"code":"var _jsxFileName = \"/home/mazur/Documents/myTestWorks/todo-list-react-redux/src/components/Todos/index.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodos, completeTodos, removeTodos, updateTodos } from '../../redux/reducer';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    todos: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodo: obj => dispatch(addTodos(obj)),\n    removeTodo: id => dispatch(removeTodos(id)),\n    updateTodo: obj => dispatch(updateTodos(obj)),\n    completeTodo: id => dispatch(completeTodos(id))\n  };\n};\n\nconst Todos = props => {\n  _s();\n\n  const [todo, setTodo] = useState(\"\");\n  const inputRef = useRef(true);\n\n  const changeFocus = () => {\n    inputRef.current.disabled = false;\n    inputRef.current.focus();\n    console.log(\"inputRef\", inputRef.current.disabled);\n    console.log(\"inputRef focus\", inputRef.current.focus());\n  };\n\n  console.log(\"changeFocus\", changeFocus);\n\n  const update = (id, value, e) => {\n    console.log(\"e\", e.which);\n\n    if (e.which === 13) {\n      props.updateTodo({\n        id,\n        item: value\n      });\n      inputRef.current.disabled = true;\n    }\n  };\n\n  const handleChange = e => {\n    setTodo(e.target.value);\n  };\n\n  console.log(\"props from store\", props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addTodos\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => handleChange(e),\n      className: \"todo-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: () => props.addTodo({\n        id: Math.floor(Math.random() * 1000),\n        item: todo,\n        complited: false\n      }),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.todos.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            ref: inputRef,\n            disabled: inputRef,\n            defaultValue: item.item,\n            onKeyPress: e => update(item.id, inputRef.current.value, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changeFocus(),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => props.completeTodo(item.id),\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => props.removeTodo(item.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this), \" \"]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Todos, \"wpVKThV2lB9VUeY4De1ihlJoL8c=\");\n\n_c = Todos;\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/home/mazur/Documents/myTestWorks/todo-list-react-redux/src/components/Todos/index.js"],"names":["useRef","useState","connect","addTodos","completeTodos","removeTodos","updateTodos","mapStateToProps","state","todos","mapDispatchToProps","dispatch","addTodo","obj","removeTodo","id","updateTodo","completeTodo","Todos","props","todo","setTodo","inputRef","changeFocus","current","disabled","focus","console","log","update","value","e","which","item","handleChange","target","Math","floor","random","complited","map"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,WAAlC,EAA+CC,WAA/C,QAAkE,qBAAlE;AACA,OAAO,aAAP;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAED;AADJ,GAAP;AAGH,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHC,IAAAA,OAAO,EAAGC,GAAD,IAASF,QAAQ,CAACR,QAAQ,CAACU,GAAD,CAAT,CADvB;AAEHC,IAAAA,UAAU,EAAGC,EAAD,IAAQJ,QAAQ,CAACN,WAAW,CAACU,EAAD,CAAZ,CAFzB;AAGHC,IAAAA,UAAU,EAAGH,GAAD,IAASF,QAAQ,CAACL,WAAW,CAACO,GAAD,CAAZ,CAH1B;AAIHI,IAAAA,YAAY,EAAGF,EAAD,IAAQJ,QAAQ,CAACP,aAAa,CAACW,EAAD,CAAd;AAJ3B,GAAP;AAMH,CAPD;;AASA,MAAMG,KAAK,GAAIC,KAAD,IAAW;AAAA;;AAErB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMqB,QAAQ,GAAGtB,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMuB,WAAW,GAAG,MAAM;AACtBD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,QAAjB,GAA4B,KAA5B;AACAH,IAAAA,QAAQ,CAACE,OAAT,CAAiBE,KAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,QAAQ,CAACE,OAAT,CAAiBC,QAAzC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,QAAQ,CAACE,OAAT,CAAiBE,KAAjB,EAA9B;AACH,GALD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,WAA3B;;AAEA,QAAMM,MAAM,GAAG,CAACd,EAAD,EAAKe,KAAL,EAAYC,CAAZ,KAAkB;AAC7BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBG,CAAC,CAACC,KAAnB;;AACA,QAAID,CAAC,CAACC,KAAF,KAAY,EAAhB,EAAoB;AAChBb,MAAAA,KAAK,CAACH,UAAN,CAAiB;AAAED,QAAAA,EAAF;AAAMkB,QAAAA,IAAI,EAAEH;AAAZ,OAAjB;AACAR,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,QAAjB,GAA4B,IAA5B;AACH;AACJ,GAND;;AAQA,QAAMS,YAAY,GAAIH,CAAD,IAAO;AACxBV,IAAAA,OAAO,CAACU,CAAC,CAACI,MAAF,CAASL,KAAV,CAAP;AACH,GAFD;;AAGAH,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,KAAhC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAGY,CAAD,IAAOG,YAAY,CAACH,CAAD,CAFjC;AAGI,MAAA,SAAS,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AACI,MAAA,SAAS,EAAC,SADd;AAEI,MAAA,OAAO,EAAE,MAAMZ,KAAK,CAACP,OAAN,CAAc;AACzBG,QAAAA,EAAE,EAAEqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CADqB;AAEzBL,QAAAA,IAAI,EAAEb,IAFmB;AAGzBmB,QAAAA,SAAS,EAAE;AAHc,OAAd,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAkBI;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAoBI;AAAA,gBACKpB,KAAK,CAACV,KAAN,CAAY+B,GAAZ,CAAiBP,IAAD,IAAU;AACvB,4BACI;AAAA,kCACI;AACI,YAAA,GAAG,EAAEX,QADT;AAEI,YAAA,QAAQ,EAAEA,QAFd;AAGI,YAAA,YAAY,EAAEW,IAAI,CAACA,IAHvB;AAII,YAAA,UAAU,EAAGF,CAAD,IAAOF,MAAM,CAACI,IAAI,CAAClB,EAAN,EAAUO,QAAQ,CAACE,OAAT,CAAiBM,KAA3B,EAAkCC,CAAlC;AAJ7B;AAAA;AAAA;AAAA;AAAA,kBADJ,eAQI;AACI,YAAA,OAAO,EAAE,MAAMR,WAAW,EAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,eAcI;AACI,YAAA,OAAO,EAAE,MAAMJ,KAAK,CAACF,YAAN,CAAmBgB,IAAI,CAAClB,EAAxB,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdJ,eAoBI;AACI,YAAA,OAAO,EAAE,MAAMI,KAAK,CAACL,UAAN,CAAiBmB,IAAI,CAAClB,EAAtB,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBJ,EAwBc,GAxBd;AAAA,WAASkB,IAAI,CAAClB,EAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AA6BH,OA9BA;AADL;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwDH,CAnFD;;GAAMG,K;;KAAAA,K;AAqFN,eAAehB,OAAO,CAACK,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CQ,KAA7C,CAAf","sourcesContent":["import { useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodos, completeTodos, removeTodos, updateTodos } from '../../redux/reducer';\nimport './index.css';\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: (obj) => dispatch(addTodos(obj)),\n        removeTodo: (id) => dispatch(removeTodos(id)),\n        updateTodo: (obj) => dispatch(updateTodos(obj)),\n        completeTodo: (id) => dispatch(completeTodos(id)),\n    }\n}\n\nconst Todos = (props) => {\n\n    const [todo, setTodo] = useState(\"\");\n\n    const inputRef = useRef(true);\n\n    const changeFocus = () => {\n        inputRef.current.disabled = false;\n        inputRef.current.focus();\n        console.log(\"inputRef\", inputRef.current.disabled);\n        console.log(\"inputRef focus\", inputRef.current.focus());\n    }\n    console.log(\"changeFocus\", changeFocus);\n\n    const update = (id, value, e) => {\n        console.log(\"e\", e.which);\n        if (e.which === 13) {\n            props.updateTodo({ id, item: value });\n            inputRef.current.disabled = true;\n        }\n    }\n\n    const handleChange = (e) => {\n        setTodo(e.target.value);\n    }\n    console.log(\"props from store\", props);\n\n    return (\n        <div className=\"addTodos\">\n            <input\n                type=\"text\"\n                onChange={(e) => handleChange(e)}\n                className=\"todo-input\"\n            />\n\n            <button\n                className=\"add-btn\"\n                onClick={() => props.addTodo({\n                    id: Math.floor(Math.random() * 1000),\n                    item: todo,\n                    complited: false,\n                })}\n            >\n                Add\n            </button>\n\n            <br />\n\n            <ul>\n                {props.todos.map((item) => {\n                    return (\n                        <li key={item.id}>\n                            <textarea\n                                ref={inputRef}\n                                disabled={inputRef}\n                                defaultValue={item.item}\n                                onKeyPress={(e) => update(item.id, inputRef.current.value, e)}\n                            />\n\n                            <button\n                                onClick={() => changeFocus()}\n                            >\n                                Edit\n                            </button>\n\n                            <button\n                                onClick={() => props.completeTodo(item.id)}\n                            >\n                                Complete\n                            </button>\n\n                            <button\n                                onClick={() => props.removeTodo(item.id)}\n                            >\n                                Delete\n                            </button>{\" \"}\n\n                        </li>\n                    )\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);"]},"metadata":{},"sourceType":"module"}